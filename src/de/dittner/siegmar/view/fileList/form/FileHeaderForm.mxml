<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:input="de.dittner.siegmar.view.common.input.*"
         xmlns:button="de.dittner.siegmar.view.common.button.*"
         xmlns:list="de.dittner.siegmar.view.common.list.*"
         xmlns:stylecomponents="cosmoLib.components.styleComponents.*"
         visible="{vm.curOperation}">

    <fx:Script><![CDATA[
        import de.dittner.siegmar.domain.fileSystem.file.FileType;
        import de.dittner.siegmar.domain.fileSystem.file.FileTypeName;
        import de.dittner.siegmar.domain.fileSystem.header.FileHeader;
        import de.dittner.siegmar.view.common.form.FileFormMode;
        import de.dittner.siegmar.view.common.utils.AppColors;
        import de.dittner.siegmar.view.common.utils.FontName;

        //--------------------------------------
        //  headerFormVM
        //--------------------------------------
        private var _vm:FileHeaderFormVM;
        [Bindable("vmChanged")]
        public function get vm():FileHeaderFormVM {return _vm;}
        public function set vm(value:FileHeaderFormVM):void {
            if (_vm != value) {
                _vm = value;
                dispatchEvent(new Event("vmChanged"));
            }
        }

        private function set fileType(fileType:uint):void {
            switch (fileType) {
                case FileType.FOLDER :
                    setCurrentState("folder");
                    break;
                case FileType.ARTICLE :
                    setCurrentState("article");
                    break;
                case FileType.DICTIONARY :
                    setCurrentState("dictionary");
                    break;
                case FileType.NOTEBOOK :
                    setCurrentState("notebook");
                    break;
                case FileType.ALBUM :
                    setCurrentState("album");
                    break;
                case FileType.PICTURE :
                    setCurrentState("picture");
                    break;
                default :
                    throw new Error("Unknown file type: " + fileType);
            }
        }

        private var reservedTitleHash:Object = {};

        private function getTitle(formMode:String):String {
            return formMode == FileFormMode.ADD ? "NEUES DOKUMENT" : formMode == FileFormMode.EDIT ? "AUFBEREITUNG" : "ENTFERNUNG";
        }

        private function isApplyBtnEnabled(mode:String, docTitle:String):Boolean {
            if (mode == FileFormMode.REMOVE) return true;
            else return docTitle && !reservedTitleHash[docTitle];
        }

        private function isBackBtnEnabled(folderStackLength:int):Boolean {
            return folderStackLength > 1;
        }

        private function isApplyDestFolderBtnEnabled(selectedFolder:FileHeader, appliedFolder:FileHeader):Boolean {
            var isFileFolder:Boolean = appliedFolder ? appliedFolder.fileID == selectedFolder.fileID : vm.system.openedFolderHeader.fileID == selectedFolder.fileID;
            pathLbl.setStyle("color", isFileFolder ? AppColors.HELL_TÜRKIS : 0xffFFff);
            return !isFileFolder;
        }

        private function radioBtnClickHandler(event:MouseEvent):void {
            vm.selectedFileType = (event.target as RadioButton).value as uint;
        }

        private function getHeader(formMode:String):String {
            if (formMode == FileFormMode.ADD) return "Wählen Sie bitte den Typ der Datei aus";
            else if (formMode == FileFormMode.EDIT) return "Hier können Sie die Dateien erneuern";
            else if (formMode == FileFormMode.REMOVE) return "Sind Sie sicher, dass Sie diese Note entfernen möchten?";
            return "";
        }
        ]]></fx:Script>

    <fx:Binding source="vm.selectedFileType" destination="fileType"/>

    <s:states>
        <s:State name="folder"/>
        <s:State name="article"/>
        <s:State name="dictionary"/>
        <s:State name="notebook"/>
        <s:State name="album"/>
        <s:State name="picture"/>
    </s:states>

    <s:BitmapImage width="100%" height="100%" alpha=".25"
                   source="@Embed(source='/assets/form_bg_pattern.png')" fillMode="repeat"/>

    <stylecomponents:Background width="75%" height="75%"
                                horizontalCenter="0" verticalCenter="0"
                                color="#202131"/>

    <s:VGroup width="75%" height="75%"
              horizontalCenter="0" verticalCenter="0"
              paddingTop="20" paddingLeft="20" paddingRight="20" paddingBottom="20"
              gap="20">

        <s:Label text="{getTitle(vm.mode)}"
                 width="100%"
                 fontFamily="{FontName.MYRIAD}" fontSize="16"
                 mouseChildren="false" mouseEnabled="false" paddingBottom="50"
                 color="{AppColors.HELL_TÜRKIS}"/>

        <s:Spacer height="25%" includeInLayout="{!vm.isEditMode}"/>

        <s:Label text="{getHeader(vm.mode)}"
                 styleName="header"
                 width="100%" paddingBottom="0" textAlign="center"
                 mouseChildren="false" mouseEnabled="false"/>

        <s:Spacer height="25%" includeInLayout="{!vm.isEditMode}"/>

        <s:Group width="100%" visible="{vm.isAddMode}" includeInLayout="{vm.isAddMode}">
            <s:layout>
                <s:TileLayout verticalGap="0" horizontalGap="10" paddingBottom="0" paddingTop="0"
                              requestedColumnCount="3" rowHeight="50"
                              columnWidth="200"/>
            </s:layout>

            <s:RadioButton id="folderBtn"
                           groupName="radioBar"
                           width="200"
                           value="{FileType.FOLDER}"
                           selected="true"
                           label="{FileTypeName.FOLDER}"
                           click="radioBtnClickHandler(event)"/>

            <s:RadioButton id="articleRadioBtn"
                           groupName="radioBar"
                           width="200"
                           value="{FileType.ARTICLE}"
                           label="{FileTypeName.ARTICLE}"
                           click="radioBtnClickHandler(event)"/>

            <s:RadioButton id="dictionaryRadioBtn"
                           groupName="radioBar"
                           width="200"
                           value="{FileType.DICTIONARY}"
                           label="{FileTypeName.DICTIONARY}"
                           click="radioBtnClickHandler(event)"/>

            <s:RadioButton id="notebookRadioBtn"
                           groupName="radioBar"
                           width="200"
                           value="{FileType.NOTEBOOK}"
                           label="{FileTypeName.NOTEBOOK}"
                           click="radioBtnClickHandler(event)"/>

            <s:RadioButton id="albumRadioBtn"
                           groupName="radioBar"
                           width="200"
                           value="{FileType.ALBUM}"
                           label="{FileTypeName.ALBUM}"
                           click="radioBtnClickHandler(event)"/>

            <s:RadioButton id="pictureRadioBtn"
                           groupName="radioBar"
                           width="200"
                           value="{FileType.PICTURE}"
                           label="{FileTypeName.PICTURE}"
                           click="radioBtnClickHandler(event)"/>
        </s:Group>

        <s:VGroup width="100%"
                  visible="{!vm.isRemoveMode}" includeInLayout="{!vm.isRemoveMode}">
            <input:TextInputForm id="titleInput"
                                 text="@{vm.fileTitle}"
                                 width="100%"
                                 title="Titel:"/>

            <input:TextInputForm id="authorInput"
                                 text="@{vm.author}"
                                 width="100%"
                                 title="Autor:"
                                 visible.folder="false" includeInLayout.folder="false"/>

            <input:TextInputForm id="dateInput"
                                 text="@{vm.curDateText}"
                                 width="100%"
                                 title="Datum der Ausgabe:"
                                 visible.folder="false" includeInLayout.folder="false"/>
        </s:VGroup>

        <s:Label id="removeLbl"
                 visible="{vm.isRemoveMode}" includeInLayout="{vm.isRemoveMode}"
                 text="{vm.infoOfRemovingFile}"
                 width="100%" textAlign="center"
                 fontFamily="{FontName.MYRIAD}" fontSize="18"
                 mouseChildren="false" mouseEnabled="false"
                 color="{AppColors.TEXT_LIGHT}"/>

        <s:Group width="100%" height="100%"
                 visible="{vm.isEditMode}" includeInLayout="{vm.isEditMode}">
            <stylecomponents:Background top="20" bottom="60" width="100%"
                                        strokeColor="{AppColors.INPUT_BORDER}" weight="1" strokeAlpha="1"
                                        color="{AppColors.INPUT_CONTENT}"/>

            <s:Label width="100%" maxDisplayedLines="1" height="20"
                     paddingTop="4"
                     text="Wählen Sie den Ordner aus, wenn Sie die Datei umsetzen wollen."
                     fontSize="14"
                     color="{AppColors.TEXT_LIGHT}"
                     fontFamily="{FontName.MYRIAD}"/>

            <s:Scroller top="20" bottom="60" width="100%"
                        horizontalScrollPolicy="off">
                <list:SelectableDataGroup id="destinationFolderList"
                                          width="100%"
                                          dataProvider="{vm.destinationFolderColl}"
                                          itemRenderer="de.dittner.siegmar.view.fileList.list.FolderRenderer"
                                          itemDoubleClicked="vm.selectFolder(event.data as FileHeader)">
                    <list:layout>
                        <s:VerticalLayout gap="0" useVirtualLayout="true" variableRowHeight="false"/>
                    </list:layout>
                </list:SelectableDataGroup>
            </s:Scroller>

            <s:HGroup width="100%" bottom="0" verticalAlign="middle">
                <button:StrokeButton id="backBtn"
                                     enabled="{isBackBtnEnabled(vm.folderStackLength)}"
                                     width="25%"
                                     color="#ffFFff"
                                     fontSize="12"
                                     fontFamily="{FontName.MYRIAD_MX}"
                                     label="Zurück"
                                     click="vm.openPrevFolder()"/>

                <button:StrokeButton id="applyDestFolderBtn"
                                     enabled="{isApplyDestFolderBtnEnabled(vm.selectedFolder, vm.appliedFolder)}"
                                     width="25%"
                                     color="#ffFFff"
                                     fontSize="12"
                                     fontFamily="{FontName.MYRIAD_MX}"
                                     label="Umsetzen"
                                     click="vm.appliedFolder = vm.selectedFolder"/>

                <s:Label id="pathLbl"
                         text="{vm.folderStackPath}"
                         verticalAlign="middle"
                         width="100%" height="50" fontSize="14"
                         color="#ffFFff"/>
            </s:HGroup>
        </s:Group>

        <s:Spacer height="100%" includeInLayout="{!vm.isEditMode}"/>

        <s:HGroup width="100%" gap="10">
            <button:StrokeButton id="cancelBtn"
                                 color="{AppColors.HELL_TÜRKIS}"
                                 width="100%"
                                 label="Abbrechen"
                                 click="vm.cancel()"/>

            <button:ColorButton id="applyBtn"
                                width="100%"
                                bgColor="{AppColors.HELL_TÜRKIS}"
                                textColor="0"
                                label="Bestätigen"
                                enabled="{isApplyBtnEnabled(vm.mode, titleInput.text)}"
                                click="vm.apply()"/>
        </s:HGroup>
    </s:VGroup>

</s:Group>
