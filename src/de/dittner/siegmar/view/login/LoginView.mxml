<?xml version="1.0"?>
<view:SmartView xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:view="de.dittner.siegmar.view.common.view.*"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:button="de.dittner.siegmar.view.common.button.*">

    <fx:Script><![CDATA[
        import de.dittner.siegmar.utils.AppInfo;
        import de.dittner.siegmar.utils.InputUtils;
        import de.dittner.siegmar.view.common.utils.AppColors;
        import de.dittner.siegmar.view.common.utils.FontName;
        import de.dittner.siegmar.view.common.view.ViewModelFactory;

        import spark.events.TextOperationEvent;

        [Bindable]
        public var vm:LoginVM;

        override protected function activating():void {
            vm = ViewModelFactory.instance.loginVM;
            vm.lockView();
        }

        override protected function activate():void {
            vm.unlockView();
            vm.viewActivated();
            setCurrentState(vm.user.isRegistered ? "authorization" : "registration");
            stage.focus = null;
            stage.focus = vm.user.isRegistered ? passwordInput : userNameInput;
        }

        override protected function deactivate():void {
            clear();
            vm.viewDeactivated();
        }

        private function setFocusToInput(input:TextInput):void {
            if (stage && input == userNameInput && currentState == "registration") {
                stage.focus = input;
            }
            else if (stage && input == passwordInput && currentState == "authorization") {
                stage.focus = input;
            }
            else if (stage) {
                stage.focus = input;
            }
        }

        private function validateRegistrationData(userNameField:String, passwordField:String):Boolean {
            return userNameField && passwordField && passwordField.length > AppInfo.MIN_PWD_LEN;
        }

        public function clear():void {
            privacyLevelInput.text = "";
            passwordInput.text = "";
            userNameInput.text = "";
            prevPrivacyLevelText = "";
        }

        private var prevPrivacyLevelText:String = "";
        private static var regexp:RegExp = InputUtils.NO_DIGITS;
        private function validationPrivacyLevelHandler(event:TextOperationEvent):void {
            if (prevPrivacyLevelText == privacyLevelInput.text) return;

            if (regexp.test(privacyLevelInput.text)) privacyLevelInput.text = prevPrivacyLevelText;
            else prevPrivacyLevelText = privacyLevelInput.text
        }

        private function login():void {
            if (validateRegistrationData(userNameInput.text, passwordInput.text))
                vm.login(vm.user.userName, passwordInput.text, privacyLevelInput.text, dataBasePasswordInput.text);
        }
        ]]></fx:Script>

    <view:states>
        <s:State name="authorization"/>
        <s:State name="registration"/>
    </view:states>

    <s:BitmapImage width="100%" height="100%" source="@Embed(source='/bg_pattern.png')" fillMode="repeat"/>

    <s:VGroup width="100%" height="100%"
              gap="25" horizontalAlign="center"
              paddingTop="30" paddingBottom="20"
              verticalAlign="middle">

        <s:Label styleName="header"
                 fontSize="50" width="100%" textAlign="center"
                 paddingBottom="60"
                 text="Die Chiffriermaschine Siegmar"/>

        <s:HGroup width="100%" gap="10" verticalAlign="middle"
                  visible.authorization="false" includeInLayout.authorization="false">
            <s:Label fontFamily="{FontName.MYRIAD}"
                     color="{AppColors.TEXT_RED}"
                     width="{width/2 - 260}"
                     fontSize="30"
                     textAlign="right"
                     text="Name, Nachname:"/>
            <s:TextInput id="userNameInput"
                         text="{vm.user.userName}"
                         width="500" styleName="loginInput"
                         addedToStage="setFocusToInput(userNameInput)"/>
        </s:HGroup>

        <s:HGroup width="100%" gap="10" verticalAlign="middle">
            <s:Label fontFamily="{FontName.MYRIAD}"
                     color="{AppColors.TEXT_RED}"
                     width="{width/2 - 260}"
                     fontSize="30"
                     textAlign="right"
                     text="Schl체ssel:"/>
            <s:TextInput id="passwordInput"
                         width="500" height="50"
                         styleName="loginInput"
                         displayAsPassword.authorization="true"
                         addedToStage="setFocusToInput(passwordInput)"
                         enter="setFocusToInput(privacyLevelInput)"/>
        </s:HGroup>

        <s:HGroup width="100%" gap="10" verticalAlign="middle">
            <s:Label fontFamily="{FontName.MYRIAD}"
                     color="{AppColors.TEXT_RED}"
                     width="{width/2 - 260}"
                     fontSize="30"
                     textAlign="right"
                     text="Geheimhaltungsgrad:"/>
            <s:TextInput id="privacyLevelInput"
                         width="500" height="50"
                         maxChars="10"
                         styleName="loginInput"
                         changing="validationPrivacyLevelHandler(event)"
                         displayAsPassword.authorization="true"
                         enter="setFocusToInput(dataBasePasswordInput)"/>
        </s:HGroup>

        <s:HGroup width="100%" gap="10" verticalAlign="middle">
            <s:Label fontFamily="{FontName.MYRIAD}"
                     color="{AppColors.TEXT_RED}"
                     width="{width/2 - 260}"
                     fontSize="30"
                     textAlign="right"
                     text="Datenbankschl체ssel:"/>
            <s:TextInput id="dataBasePasswordInput"
                         width="500" height="50"
                         styleName="loginInput"
                         displayAsPassword.authorization="true"
                         enter="login()"/>
        </s:HGroup>

        <button:BlackButton id="completeBtn"
                            enabled="{validateRegistrationData(userNameInput.text, passwordInput.text)}"
                            width="500"
                            label.registration="Best채tigen"
                            label.authorization="Einloggen"
                            click="login()"/>

        <s:Label id="errorLbl"
                 fontFamily="{FontName.BASIC}"
                 fontWeight="bold"
                 visible="{vm.isLoginWithError}"
                 color="{AppColors.TEXT_INVALID}"
                 width="100%"
                 fontSize="20"
                 textAlign="center"
                 text="{vm.errorText || 'Ung체ltig!'}"/>

    </s:VGroup>

</view:SmartView>
