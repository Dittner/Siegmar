<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:input="de.dittner.siegmar.view.common.input.*"
         xmlns:button="de.dittner.siegmar.view.common.button.*"
         xmlns:body="de.dittner.siegmar.view.fileView.form.body.*"
         implements="de.dittner.siegmar.view.common.form.IBodyForm">

    <fx:Script><![CDATA[
        import de.dittner.siegmar.view.common.utils.AppColors;
        import de.dittner.siegmar.view.common.utils.FontName;

        import de.dittner.async.AsyncOperation;
        import de.dittner.async.IAsyncOperation;
        import de.dittner.async.utils.invalidateOf;
        import de.dittner.siegmar.model.domain.fileSystem.body.NoteListBody;
        import de.dittner.siegmar.model.domain.fileSystem.body.links.BookLink;
        import de.dittner.siegmar.model.domain.fileSystem.body.links.BookLinksBody;
        import de.dittner.siegmar.model.domain.fileSystem.body.note.ArticleNote;
        import de.dittner.siegmar.model.domain.fileSystem.body.note.NoteType;
        import de.dittner.siegmar.model.domain.fileSystem.file.SiegmarFile;
        import de.dittner.siegmar.view.common.utils.AppColors;
        import de.dittner.siegmar.view.common.utils.FontName;

        import mx.collections.ArrayCollection;

        //--------------------------------------
        //  bookLinksBody
        //--------------------------------------
        private var bookLinksBodyChanged:Boolean = false;
        private var _bookLinksBody:BookLinksBody;
        [Bindable("bookLinksBodyChanged")]
        public function get bookLinksBody():BookLinksBody {return _bookLinksBody;}
        public function set bookLinksBody(value:BookLinksBody):void {
            if (_bookLinksBody != value) {
                _bookLinksBody = value;
                bookLinksBodyChanged = true;
                invalidateProperties();
                dispatchEvent(new Event("bookLinksBodyChanged"));
            }
        }

        override protected function commitProperties():void {
            super.commitProperties();
            if (bookLinksBodyChanged) {
                bookLinksBodyChanged = false;
                linksList.linkColl = new ArrayCollection(bookLinksBody ? bookLinksBody.bookLinks : []);
            }
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Interface Methods
        //
        //----------------------------------------------------------------------------------------------

        private var operation:IAsyncOperation;
        private var file:SiegmarFile;
        private var fileBody:NoteListBody;
        public function createNote(file:SiegmarFile):IAsyncOperation {
            operation = new AsyncOperation();
            this.file = file;
            this.fileBody = file.body as NoteListBody;
            currentState = "add";
            invalidateOf(focusTextInput);
            return operation;
        }

        public function editNote(file:SiegmarFile):IAsyncOperation {
            operation = new AsyncOperation();
            this.file = file;
            this.fileBody = file.body as NoteListBody;
            var articleNote:ArticleNote = file.selectedNote as ArticleNote;
            textInput.text = articleNote.text;
            textBtn.selected = titleBtn.selected = subtitleBtn.selected = epigraphBtn.selected = citationBtn.selected = false;
            switch (articleNote.noteType) {
                case NoteType.TEXT :
                    textBtn.selected = true;
                    break;
                case NoteType.TITLE :
                    titleBtn.selected = true;
                    break;
                case NoteType.SUBTITLE :
                    subtitleBtn.selected = true;
                    break;
                case NoteType.EPIGRAPH :
                    epigraphBtn.selected = true;
                    break;
                case NoteType.CITATION :
                    citationBtn.selected = true;
                    break;
            }
            authorInput.text = articleNote.author;
            if (articleNote.bookLinkId) selectBookLink(articleNote.bookLinkId);

            currentState = "edit";
            invalidateOf(focusTextInput);
            return operation;
        }

        private function focusTextInput():void {
            if (stage) stage.focus = textInput;
        }

        private function selectBookLink(id:String):void {
            if (!bookLinksBody) return;
            for each(var link:BookLink in bookLinksBody.bookLinks)
                if (link.id == id) {
                    linksList.selectedLink = link;
                    break;
                }
        }

        public function removeNote(file:SiegmarFile):IAsyncOperation {
            operation = new AsyncOperation();
            this.file = file;
            this.fileBody = file.body as NoteListBody;
            var articleNote:ArticleNote = file.selectedNote as ArticleNote;
            removeLbl.text = articleNote.text;
            currentState = "remove";
            return operation;
        }

        public function clear():void {
            textInput.text = "";
            operation = null;
            textBtn.selected = true;
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Private Methods
        //
        //----------------------------------------------------------------------------------------------

        private function cancelBtnClickHandler():void {
            operation.dispatchSuccess(false);
        }

        private function applyBtnClickHandler():void {
            if (currentState == "add") {
                fileBody.addNote(getNote());
            }
            else if (currentState == "edit") {
                fileBody.replaceNote(file.selectedNote, getNote());
            }
            else if (currentState == "remove") {
                fileBody.removeNote(file.selectedNote);
            }
            operation.dispatchSuccess(true);
        }

        private function getNote():ArticleNote {
            var res:ArticleNote = new ArticleNote();
            res.text = textInput.text;
            res.author = "";
            res.bookLinkId = "";
            if (textBtn.selected) res.noteType = NoteType.TEXT;
            else if (titleBtn.selected) res.noteType = NoteType.TITLE;
            else if (subtitleBtn.selected) res.noteType = NoteType.SUBTITLE;
            else if (epigraphBtn.selected) res.noteType = NoteType.EPIGRAPH;
            else if (citationBtn.selected) {
                res.noteType = NoteType.CITATION;
                res.author = authorBtn.selected ? authorInput.text : "";
                res.bookLinkId = linkBtn.selected && linksList.selectedLink ? linksList.selectedLink.id : "";
            }
            return res;
        }

        private function isApplyBtnEnabled(currentState:String, docContent:String):Boolean {
            if (currentState == "remove") return true;
            else return docContent;
        }
        ]]></fx:Script>

    <s:states>
        <s:State name="add"/>
        <s:State name="edit"/>
        <s:State name="remove"/>
    </s:states>

    <s:layout>
        <s:VerticalLayout gap="10"/>
    </s:layout>

    <s:Label text.add="NEUE NOTIZ"
             text.edit="AUFBEREITUNG"
             text.remove="ENTFERNUNG"
             width="100%"
             fontFamily="{FontName.MYRIAD}" fontSize="16"
             mouseChildren="false" mouseEnabled="false" paddingBottom="30"
             color="{AppColors.HELL_TÃœRKIS}"/>

    <s:Group width="100%" visible.remove="false" includeInLayout.remove="false">
        <s:layout>
            <s:TileLayout verticalGap="0" horizontalGap="10" paddingBottom="0" paddingTop="0"
                          requestedColumnCount="3" rowHeight="50"
                          columnWidth="150" verticalAlign="top"/>
        </s:layout>

        <s:RadioButton id="textBtn"
                       groupName="radioBar"
                       width="150"
                       selected="true"
                       label="Text"/>

        <s:RadioButton id="titleBtn"
                       groupName="radioBar"
                       width="150"
                       label="Titel"/>

        <s:RadioButton id="subtitleBtn"
                       groupName="radioBar"
                       width="150"
                       label="Untertitel"/>

        <s:RadioButton id="epigraphBtn"
                       groupName="radioBar"
                       width="150"
                       label="Motto"/>

        <s:RadioButton id="citationBtn"
                       groupName="radioBar"
                       width="150"
                       label="Zitat"/>

        <s:HGroup width="100%" visible="{citationBtn.selected}" includeInLayout="{citationBtn.selected}">
            <s:VGroup gap="10" height="50%">
                <s:RadioButton id="linkBtn"
                               selected="true"
                               groupName="citationBar"
                               width="180"
                               label="Hinweise des Zitates"/>

                <s:Spacer height="100%"/>

                <s:RadioButton id="authorBtn"
                               groupName="citationBar"
                               width="180"
                               label="Author des Zitates"/>
            </s:VGroup>
            <s:VGroup gap="10" width="100%" height="50%">
                <body:LinksList id="linksList"
                                visible="{linkBtn.selected}"
                                width="{width * .4}" height="25"/>

                <s:Spacer height="100%"/>

                <input:TextInputForm id="authorInput"
                                     showTitle="false" height="25"
                                     visible="{authorBtn.selected}"
                                     width="100%"/>
            </s:VGroup>
        </s:HGroup>
    </s:Group>

    <input:TextAreaForm id="textInput"
                        visible.remove="false" includeInLayout.remove="false"
                        width="100%" height="100%" title="Inhalt:"/>

    <s:Label styleName="header"
             paddingTop="30" paddingBottom="30"
             text="Sind Sie sicher, dass Sie diese Note entfernen mÃ¶chten?"
             visible="false" includeInLayout="false"
             visible.remove="true" includeInLayout.remove="true"
             width="100%"
             textAlign="center" verticalAlign="middle"
             mouseChildren="false" mouseEnabled="false"
             color="{AppColors.HELL_TÃœRKIS}"/>

    <s:Label id="removeLbl"
             visible="false" visible.remove="true"
             includeInLayout="false" includeInLayout.remove="true"
             width="100%" height="100%" textAlign="center" verticalAlign="middle"
             fontFamily="{FontName.MYRIAD}" fontSize="18"
             mouseChildren="false" mouseEnabled="false"
             maxDisplayedLines="8"
             color="{AppColors.TEXT_LIGHT}"/>

    <s:HGroup width="100%" gap="10">
        <button:StrokeButton id="cancelBtn"
                             width="100%"
                             color="{AppColors.HELL_TÃœRKIS}"
                             label="Abbrechen"
                             click="cancelBtnClickHandler()"/>

        <button:ColorButton id="applyBtn"
                            width="100%"
                            label="BestÃ¤tigen"
                            bgColor="{AppColors.HELL_TÃœRKIS}"
                            textColor="0"
                            enabled="{isApplyBtnEnabled(currentState, textInput.text)}"
                            click="applyBtnClickHandler()"/>
    </s:HGroup>

</s:Group>
