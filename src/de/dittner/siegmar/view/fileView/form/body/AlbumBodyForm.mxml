<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:input="de.dittner.siegmar.view.common.input.*"
         xmlns:button="de.dittner.siegmar.view.common.button.*"
         implements="de.dittner.siegmar.view.common.form.IBodyForm">

    <fx:Script><![CDATA[
        import de.dittner.async.AsyncOperation;
        import de.dittner.async.IAsyncOperation;
        import de.dittner.async.ProgressOperation;
        import de.dittner.async.utils.invalidateOf;
        import de.dittner.siegmar.model.domain.fileSystem.body.album.AlbumBody;
        import de.dittner.siegmar.model.domain.fileSystem.file.SiegmarFile;
        import de.dittner.siegmar.utils.FileChooser;
        import de.dittner.siegmar.utils.FileLoader;
        import de.dittner.siegmar.utils.FolderChooser;
        import de.dittner.siegmar.view.common.utils.AppColors;
        import de.dittner.siegmar.view.fileView.FileViewVM;

        private static const BROWSE_FILE_FILTERS:Array = [new FileFilter("PNG-file", "*.png"), new FileFilter("JPG-file", "*.jpg"), new FileFilter("JPEG-file", "*.jpeg")];

        //--------------------------------------
        //  vm
        //--------------------------------------
        private var _vm:FileViewVM;
        [Bindable("vmChanged")]
        public function get vm():FileViewVM {return _vm;}
        public function set vm(value:FileViewVM):void {
            if (_vm != value) {
                _vm = value;
                dispatchEvent(new Event("vmChanged"));
            }
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Interface Methods
        //
        //----------------------------------------------------------------------------------------------

        private var operation:IAsyncOperation;
        private var file:SiegmarFile;
        private var fileBody:AlbumBody;
        public function createNote(file:SiegmarFile):IAsyncOperation {
            operation = new AsyncOperation();
            this.file = file;
            this.fileBody = file.body as AlbumBody;
            currentState = "add";
            invalidateOf(focusTextInput);
            return operation;
        }

        public function editNote(file:SiegmarFile):IAsyncOperation {
            operation = new AsyncOperation();
            this.file = file;
            this.fileBody = file.body as AlbumBody;
            textInput.text = file.selectedNote.title;
            fileBody.loadPhoto(file.selectedNote.id).addCompleteCallback(photoLoaded);
            currentState = "edit";
            invalidateOf(focusTextInput);
            return operation;
        }

        private function photoLoaded(op:IAsyncOperation):void {
            if (op.isSuccess) {
                selectedPhoto = op.result;
            }
        }

        private function focusTextInput():void {
            if (stage) stage.focus = textInput;
        }

        public function removeNote(file:SiegmarFile):IAsyncOperation {
            operation = new AsyncOperation();
            this.file = file;
            this.fileBody = file.body as AlbumBody;
            removeLbl.text = file.selectedNote.title;
            fileBody.loadPhoto(file.selectedNote.id).addCompleteCallback(photoLoaded);
            currentState = "remove";
            return operation;
        }

        public function clear():void {
            textInput.text = "";
            operation = null;
            selectedPhoto = null;
            selectedFiles = null;
        }

        //--------------------------------------
        //  selectedPhoto
        //--------------------------------------
        private var _selectedPhoto:BitmapData;
        [Bindable("selectedPhotoChanged")]
        public function get selectedPhoto():BitmapData {return _selectedPhoto;}
        public function set selectedPhoto(value:BitmapData):void {
            if (_selectedPhoto != value) {
                if (_selectedPhoto) _selectedPhoto.dispose();
                _selectedPhoto = value;
                dispatchEvent(new Event("selectedPhotoChanged"));
            }
        }

        //--------------------------------------
        //  selectedFiles
        //--------------------------------------
        private var _selectedFiles:Array;
        [Bindable("selectedFilesChanged")]
        public function get selectedFiles():Array {return _selectedFiles;}
        public function set selectedFiles(value:Array):void {
            if (_selectedFiles != value) {
                _selectedFiles = value;
                dispatchEvent(new Event("selectedFilesChanged"));
            }
        }
        //----------------------------------------------------------------------------------------------
        //
        //  Private Methods
        //
        //----------------------------------------------------------------------------------------------

        private function isApplyBtnEnabled(currentState:String, docContent:String, selectedPhoto:BitmapData, selectedFiles:Array):Boolean {
            if (currentState == "remove") return true;
            else return (docContent && selectedPhoto) || selectedFiles;
        }

        private function cancelBtnClickHandler():void {
            operation.dispatchSuccess(false);
        }

        private function applyBtnClickHandler():void {
            if (currentState == "add") {
                if (selectedFiles) {
                    loadFiles();
                    return;
                }
                else if (selectedPhoto) {
                    fileBody.addPhoto(selectedPhoto, textInput.text);
                }
            }
            else if (currentState == "edit") {
                fileBody.updatePhoto(file.selectedNote.id, selectedPhoto, textInput.text);
            }
            else if (currentState == "remove") {
                fileBody.removePhoto(file.selectedNote.id);
            }
            operation.dispatchSuccess(true);
        }

        private function loadFiles():void {
            vm.lockView();
            var fileLoader:FileLoader = new FileLoader();
            fileLoader.addProgressCallback(progressHandler);
            fileLoader.addCompleteCallback(photosLoadedHandler);
            fileLoader.loadFiles(selectedFiles, loadedFileHandler)
        }

        private function progressHandler(op:ProgressOperation):void {
            progressLbl.text = int(op.progress * 100) + "% Fotos wurde heruntergeladen"
        }

        private function photosLoadedHandler(op:IAsyncOperation):void {
            vm.unlockView();
            if (op.isSuccess) {
                progressLbl.text = "100% Fotos wurde heruntergeladen";
                operation.dispatchSuccess(true);
            }
            else {
                progressLbl.text = "Error: " + op.error;
                operation.dispatchError(op.error);
            }
        }

        private function loadedFileHandler(content:Bitmap, file:File):void {
            var extension:String = "." + file.extension;
            var extensionPos:int = file.name.lastIndexOf(extension);
            var title:String = extensionPos != -1 ? file.name.substr(0, extensionPos) : file.name;
            fileBody.addPhoto(content.bitmapData, title);
        }

        private function addImage():void {
            var op:IAsyncOperation = FileChooser.browse(BROWSE_FILE_FILTERS);
            op.addCompleteCallback(imageBrowsed);
        }

        private function imageBrowsed(op:IAsyncOperation):void {
            if (op.isSuccess && op.result) {
                selectedPhoto = op.isSuccess ? (op.result[0] as Bitmap).bitmapData : null;
                textInput.text = (op.result[1] as File).name;
            }
        }

        private function addImagesFolder():void {
            var op:IAsyncOperation = FolderChooser.browse(BROWSE_FILE_FILTERS);
            op.addCompleteCallback(filesBrowsed);
        }

        private function filesBrowsed(op:IAsyncOperation):void {
            if (op.isSuccess && op.result.length > 0) {
                selectedPhoto = null;
                selectedFiles = op.result;
            }
            else {
                selectedFiles = null;
            }
        }
        ]]></fx:Script>

    <s:states>
        <s:State name="add"/>
        <s:State name="edit"/>
        <s:State name="remove"/>
    </s:states>

    <s:layout>
        <s:VerticalLayout gap="10"/>
    </s:layout>

    <s:Label text.add="NEUE NOTIZ"
             text.edit="AUFBEREITUNG"
             text.remove="ENTFERNUNG"
             width="100%"
             fontSize="16"
             mouseChildren="false" mouseEnabled="false" paddingBottom="30"
             color="{AppColors.HELL_TÃœRKIS}"/>

    <input:TextInputForm id="textInput"
                         enabled="{!selectedFiles}"
                         visible.remove="false" includeInLayout.remove="false"
                         width="100%" title="Titel:"/>

    <s:HGroup width="100%" gap="20">
        <button:StrokeButton id="addImageBtn"
                             width="100%"
                             visible.remove="false" includeInLayout.remove="false"
                             label="+ Bild" color="#ffFFff"
                             click="addImage()"/>
        <button:StrokeButton id="addImagesFolderBtn"
                             width="100%"
                             visible.remove="false" includeInLayout.remove="false"
                             visible.edit="false" includeInLayout.edit="false"
                             label="+ Ordner" color="#ffFFff"
                             click="addImagesFolder()"/>
    </s:HGroup>

    <s:Spacer height="10%"/>

    <s:Label id="progressLbl"
             visible="false" includeInLayout="false"
             visible.add="{selectedFiles}" includeInLayout.add="{selectedFiles}"
             width="100%" height="100%" textAlign="center" verticalAlign="middle"
             fontSize="18"
             mouseChildren="false" mouseEnabled="false"
             maxDisplayedLines="1"
             text="{selectedFiles.length + ' Foto(s) haben Sie ausgewÃ¤hlt'}"
             color="{AppColors.TEXT_LIGHT}"/>

    <s:Label styleName="header"
             paddingTop="30" paddingBottom="30"
             text="Sind Sie sicher, dass Sie dieses Foto entfernen mÃ¶chten?"
             visible="false" includeInLayout="false"
             visible.remove="true" includeInLayout.remove="true"
             width="100%"
             textAlign="center" verticalAlign="middle"
             mouseChildren="false" mouseEnabled="false"
             color="{AppColors.HELL_TÃœRKIS}"/>

    <s:Label id="removeLbl"
             visible="false" includeInLayout="false"
             visible.remove="true" includeInLayout.remove="true"
             width="100%" height="100%" textAlign="center" verticalAlign="middle"
             fontSize="18"
             mouseChildren="false" mouseEnabled="false"
             maxDisplayedLines="1"
             color="{AppColors.TEXT_LIGHT}"/>

    <s:Image width="100%" height="300"
             scaleMode="letterbox" fillMode="scale"
             source="{selectedPhoto}"/>

    <s:Spacer height="10%"/>

    <s:HGroup width="100%" gap="10">
        <button:StrokeButton id="cancelBtn"
                             width="100%"
                             color="{AppColors.HELL_TÃœRKIS}"
                             label="Abbrechen"
                             click="cancelBtnClickHandler()"/>

        <button:ColorButton id="applyBtn"
                            width="100%"
                            bgColor="{AppColors.HELL_TÃœRKIS}"
                            textColor="0"
                            label="BestÃ¤tigen"
                            enabled="{isApplyBtnEnabled(currentState, textInput.text, selectedPhoto, selectedFiles)}"
                            click="applyBtnClickHandler()"/>
    </s:HGroup>

</s:Group>
