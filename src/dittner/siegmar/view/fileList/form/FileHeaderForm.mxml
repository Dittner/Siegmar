<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:input="dittner.siegmar.view.common.input.*"
         xmlns:button="dittner.siegmar.view.common.button.*"
         xmlns:list="dittner.siegmar.view.common.list.*"
         xmlns:stylecomponents="cosmoLib.components.styleComponents.*"
         creationComplete="creationCompleteHandler(event)">

    <fx:Script><![CDATA[
        import dittner.siegmar.domain.fileSystem.FileOptionKeys;
        import dittner.siegmar.domain.fileSystem.file.FileType;
        import dittner.siegmar.domain.fileSystem.file.FileTypeName;
        import dittner.siegmar.domain.fileSystem.header.FileHeader;
        import dittner.siegmar.view.common.form.FileFormMode;
        import dittner.siegmar.view.common.utils.AppColors;
        import dittner.siegmar.view.common.utils.FontName;

        import mx.collections.ArrayCollection;
        import mx.events.FlexEvent;
        import mx.formatters.DateFormatter;

        private static var dateFormatter:DateFormatter;

        //--------------------------------------
        //  destinationFolderColl
        //--------------------------------------
        private var _destinationFolderColl:ArrayCollection;
        [Bindable("destinationFolderCollChanged")]
        public function get destinationFolderColl():ArrayCollection {return _destinationFolderColl;}
        public function set destinationFolderColl(value:ArrayCollection):void {
            if (_destinationFolderColl != value) {
                _destinationFolderColl = value;
                dispatchEvent(new Event("destinationFolderCollChanged"));
            }
        }

        //--------------------------------------
        //  mode
        //--------------------------------------
        private var _mode:String = FileFormMode.ADD;
        [Bindable("modeChanged")]
        public function get mode():String {return _mode;}

        [Bindable("modeChanged")]
        public function get isAddMode():Boolean {return _mode == FileFormMode.ADD;}

        [Bindable("modeChanged")]
        public function get isRemoveMode():Boolean {return _mode == FileFormMode.REMOVE;}

        [Bindable("modeChanged")]
        public function get isEditMode():Boolean {return _mode == FileFormMode.EDIT;}

        private function setFileType(fileType:uint):void {
            switch (fileType) {
                case FileType.FOLDER :
                    setCurrentState("folder");
                    break;
                case FileType.ARTICLE :
                    setCurrentState("article");
                    break;
                case FileType.DICTIONARY :
                    setCurrentState("dictionary");
                    break;
                case FileType.NOTEBOOK :
                    setCurrentState("notebook");
                    break;
                case FileType.ALBUM :
                    setCurrentState("album");
                    break;
                case FileType.PICTURE :
                    setCurrentState("picture");
                    break;
                default :
                    throw new Error("Unknown file type: " + fileType);
            }
        }

        private var reservedTitleHash:Object = {};
        public function add(reservedTitleHash:Object):void {
            this.reservedTitleHash = reservedTitleHash;
            _mode = FileFormMode.ADD;
            dateInput.text = dateFormatter.format(new Date());
            dispatchEvent(new Event("modeChanged"));
        }

        public function edit(fileHeader:FileHeader, reservedTitleHash:Object):void {
            this.reservedTitleHash = reservedTitleHash;
            _mode = FileFormMode.EDIT;
            titleInput.text = fileHeader.title;
            authorInput.text = fileHeader.options[FileOptionKeys.AUTHOR] || "";
            dateInput.text = fileHeader.options[FileOptionKeys.DATE_CREATED] || "";
            setFileType(fileHeader.fileType);
            dispatchEvent(new Event("modeChanged"));
        }

        public function remove(fileHeader:FileHeader):void {
            _mode = FileFormMode.REMOVE;
            removeLbl.text = "Sind Sie sicher, das Sie entfernen möchten?\n\n";
            removeLbl.text += fileHeader.isFolder ? "Ordner: " : "Datei: ";
            removeLbl.text += fileHeader.title.toUpperCase();
            dispatchEvent(new Event("modeChanged"));
        }

        public function clear():void {
            titleInput.text = "";
            authorInput.text = "";
            dateInput.text = "";
            setCurrentState("folder");
        }

        private function getTitle(formMode:String):String {
            return formMode == FileFormMode.ADD ? "NEUES DOKUMENT" : formMode == FileFormMode.EDIT ? "AUFBEREITUNG" : "ENTFERNUNG";
        }

        private function isApplyBtnEnabled(mode:String, docTitle:String):Boolean {
            if (mode == FileFormMode.REMOVE) return true;
            else return docTitle && !reservedTitleHash[docTitle];
        }

        private function radioBtnClickHandler(event:MouseEvent):void {
            setFileType((event.target as RadioButton).value as uint);
        }

        private function creationCompleteHandler(event:FlexEvent):void {
            if (!dateFormatter) {
                dateFormatter = new DateFormatter();
                dateFormatter.formatString = 'MM.DD.YYYY JJ:NN';
            }
        }
        ]]></fx:Script>

    <s:states>
        <s:State name="folder"/>
        <s:State name="article"/>
        <s:State name="dictionary"/>
        <s:State name="notebook"/>
        <s:State name="album"/>
        <s:State name="picture"/>
    </s:states>

    <s:BitmapImage width="100%" height="100%"
                   source="@Embed(source='/assets/form_bg_pattern.png')" fillMode="repeat"/>

    <s:VGroup width="100%" height="100%" paddingTop="20" paddingLeft="20" paddingRight="20" paddingBottom="20"
              gap="20">

        <s:Label text="{getTitle(mode)}"
                 width="100%"
                 fontFamily="{FontName.MYRIAD}" fontSize="16"
                 mouseChildren="false" mouseEnabled="false" paddingBottom="50"
                 color="{AppColors.TEXT_WHITE}"/>

        <s:Label text="Wählen Sie bitte den Typ der Datei aus"
                 visible="{isAddMode}" includeInLayout="{isAddMode}"
                 width="100%" paddingBottom="0" textAlign="center"
                 fontFamily="{FontName.MYRIAD}" fontSize="18"
                 mouseChildren="false" mouseEnabled="false"
                 color="{AppColors.HELL_TÜRKIS}"/>

        <s:Group width="100%" visible="{isAddMode}" includeInLayout="{isAddMode}">
            <s:layout>
                <s:TileLayout verticalGap="0" horizontalGap="10" paddingBottom="0" paddingTop="0"
                              requestedColumnCount="3" rowHeight="50"
                              columnWidth="200"/>
            </s:layout>

            <s:RadioButton id="folderBtn"
                           groupName="radioBar"
                           width="200"
                           value="{FileType.FOLDER}"
                           selected="true"
                           label="{FileTypeName.FOLDER}"
                           click="radioBtnClickHandler(event)"/>

            <s:RadioButton id="articleRadioBtn"
                           groupName="radioBar"
                           width="200"
                           value="{FileType.ARTICLE}"
                           label="{FileTypeName.ARTICLE}"
                           click="radioBtnClickHandler(event)"/>

            <s:RadioButton id="dictionaryRadioBtn"
                           groupName="radioBar"
                           width="200"
                           value="{FileType.DICTIONARY}"
                           label="{FileTypeName.DICTIONARY}"
                           click="radioBtnClickHandler(event)"/>

            <s:RadioButton id="notebookRadioBtn"
                           groupName="radioBar"
                           width="200"
                           value="{FileType.NOTEBOOK}"
                           label="{FileTypeName.NOTEBOOK}"
                           click="radioBtnClickHandler(event)"/>

            <s:RadioButton id="albumRadioBtn"
                           groupName="radioBar"
                           enabled="false"
                           width="200"
                           value="{FileType.ALBUM}"
                           label="{FileTypeName.ALBUM}"
                           click="radioBtnClickHandler(event)"/>

            <s:RadioButton id="pictureRadioBtn"
                           groupName="radioBar"
                           width="200"
                           value="{FileType.PICTURE}"
                           label="{FileTypeName.PICTURE}"
                           click="radioBtnClickHandler(event)"/>
        </s:Group>

        <s:VGroup width="100%"
                  visible="{!isRemoveMode}" includeInLayout="{!isRemoveMode}">
            <input:TextInputForm id="titleInput" width="100%" title="Titel:"/>

            <input:TextInputForm id="authorInput" width="100%" title="Autor:"
                                 visible.folder="false" includeInLayout.folder="false"/>
            <input:TextInputForm id="dateInput" width="100%" title="Datum der Ausgabe:"
                                 visible.folder="false" includeInLayout.folder="false"/>
        </s:VGroup>

        <s:Label id="removeLbl"
                 visible="{isRemoveMode}" includeInLayout="{isRemoveMode}"
                 width="100%" textAlign="center"
                 fontFamily="{FontName.MYRIAD}" fontSize="18"
                 mouseChildren="false" mouseEnabled="false"
                 color="{AppColors.TEXT_LIGHT}"/>

        <s:Spacer height="100%"
                  visible="{isRemoveMode}" includeInLayout="{isRemoveMode}"/>

        <s:Group width="100%" height="100%"
                 visible="{isEditMode}" includeInLayout="{isEditMode}">
            <stylecomponents:Background top="20" bottom="60" width="100%" color="#ffFFff"/>

            <s:Label width="100%" maxDisplayedLines="1" height="20"
                     paddingTop="4"
                     text="Wählen Sie den Ordner aus, wenn Sie die Datei umsetzen wollen."
                     fontSize="14"
                     color="{AppColors.TEXT_LIGHT}"
                     fontFamily="{FontName.MYRIAD}"/>

            <s:Scroller top="20" bottom="60" width="100%"
                        horizontalScrollPolicy="off">
                <list:SelectableDataGroup id="destinationFolderList"
                                          width="100%"
                                          dataProvider="{destinationFolderColl}"
                                          itemRenderer="dittner.siegmar.view.fileList.list.FileHeaderRenderer">
                    <list:layout>
                        <s:VerticalLayout gap="0" useVirtualLayout="true" variableRowHeight="false"/>
                    </list:layout>
                </list:SelectableDataGroup>
            </s:Scroller>

            <s:HGroup width="100%" bottom="0" verticalAlign="middle">
                <button:StrokeButton id="backBtn"
                                     width="25%"
                                     color="#ffFFff"
                                     fontSize="12"
                                     fontFamily="{FontName.MYRIAD_MX}"
                                     label="Zurück"/>

                <button:StrokeButton id="applyDestFolderBtn"
                                     width="25%"
                                     color="#ffFFff"
                                     fontSize="12"
                                     fontFamily="{FontName.MYRIAD_MX}"
                                     label="Umsetzen"/>

                <s:Label id="pathLbl"
                         verticalAlign="middle"
                         width="100%" height="50" fontSize="14"
                         color="#ffFFff"/>
            </s:HGroup>
        </s:Group>

        <s:HGroup width="100%" gap="10">
            <button:GrayButton id="cancelBtn"
                               width="100%"
                               label="Abbrechen"/>

            <button:BlackButton id="applyBtn"
                                width="100%"
                                label="Bestätigen"
                                enabled="{isApplyBtnEnabled(mode, titleInput.text)}"/>
        </s:HGroup>
    </s:VGroup>

</s:Group>
