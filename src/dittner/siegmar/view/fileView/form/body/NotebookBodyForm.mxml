<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:input="dittner.siegmar.view.common.input.*"
         xmlns:button="dittner.siegmar.view.common.button.*"
         implements="dittner.siegmar.view.common.form.IBodyForm">

    <fx:Script><![CDATA[
        import dittner.async.AsyncOperation;
        import dittner.async.IAsyncOperation;
        import dittner.async.utils.invalidateOf;
        import dittner.siegmar.domain.fileSystem.body.NoteListBody;
        import dittner.siegmar.domain.fileSystem.body.note.Note;
        import dittner.siegmar.domain.fileSystem.file.SiegmarFile;
        import dittner.siegmar.view.common.utils.AppColors;

        //----------------------------------------------------------------------------------------------
        //
        //  Interface Methods
        //
        //----------------------------------------------------------------------------------------------

        private var operation:IAsyncOperation;
        private var file:SiegmarFile;
        private var fileBody:NoteListBody;
        public function createNote(file:SiegmarFile):IAsyncOperation {
            operation = new AsyncOperation();
            this.file = file;
            this.fileBody = file.body as NoteListBody;
            currentState = "add";
            invalidateOf(focusTextInput);
            return operation;
        }

        public function editNote(file:SiegmarFile):IAsyncOperation {
            operation = new AsyncOperation();
            this.file = file;
            this.fileBody = file.body as NoteListBody;
            var note:Note = file.selectedNote;
            textInput.text = note.text;
            currentState = "edit";
            invalidateOf(focusTextInput);
            return operation;
        }

        private function focusTextInput():void {
            if (stage) stage.focus = textInput.area;
        }

        public function removeNote(file:SiegmarFile):IAsyncOperation {
            operation = new AsyncOperation();
            this.file = file;
            this.fileBody = file.body as NoteListBody;
            var note:Note = file.selectedNote;
            removeLbl.text = note.text;
            currentState = "remove";
            return operation;
        }

        public function clear():void {
            textInput.text = "";
            operation = null;
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Private Methods
        //
        //----------------------------------------------------------------------------------------------

        private function isApplyBtnEnabled(currentState:String, docContent:String):Boolean {
            if (currentState == "remove") return true;
            else return docContent;
        }

        private function cancelBtnClickHandler():void {
            operation.dispatchSuccess(false);
        }

        private function applyBtnClickHandler():void {
            if (currentState == "add") {
                fileBody.addNote(getNote());
            }
            else if (currentState == "edit") {
                fileBody.replaceNote(file.selectedNote, getNote());
            }
            else if (currentState == "remove") {
                fileBody.removeNote(file.selectedNote);
            }
            operation.dispatchSuccess(true);
        }

        private function getNote():Note {
            var res:Note = new Note();
            res.text = textInput.text;
            return res;
        }
        ]]></fx:Script>

    <s:states>
        <s:State name="add"/>
        <s:State name="edit"/>
        <s:State name="remove"/>
    </s:states>

    <s:layout>
        <s:VerticalLayout gap="10"/>
    </s:layout>

    <s:Label text.add="NEUE NOTIZ"
             text.edit="AUFBEREITUNG"
             text.remove="ENTFERNUNG"
             width="100%"
             fontSize="16"
             mouseChildren="false" mouseEnabled="false" paddingBottom="30"
             color="{AppColors.HELL_TÜRKIS}"/>

    <input:TextAreaForm id="textInput"
                        visible.remove="false" includeInLayout.remove="false"
                        width="100%" height="100%" title="Inhalt:"/>

    <s:Label styleName="header"
             paddingTop="30" paddingBottom="30"
             text="Sind Sie sicher, das Sie entfernen möchten?"
             visible="false" includeInLayout="false"
             visible.remove="true" includeInLayout.remove="true"
             width="100%"
             textAlign="center" verticalAlign="middle"
             mouseChildren="false" mouseEnabled="false"
             color="{AppColors.HELL_TÜRKIS}"/>

    <s:Label id="removeLbl"
             visible="false" includeInLayout="false"
             visible.remove="true" includeInLayout.remove="true"
             width="100%" height="100%" textAlign="center" verticalAlign="middle"
             fontSize="18"
             mouseChildren="false" mouseEnabled="false"
             maxDisplayedLines="8"
             color="{AppColors.TEXT_LIGHT}"/>

    <s:Spacer height="10%"/>

    <s:HGroup width="100%" gap="10">
        <button:StrokeButton id="cancelBtn"
                             width="100%"
                             color="{AppColors.HELL_TÜRKIS}"
                             label="Abbrechen"
                             click="cancelBtnClickHandler()"/>

        <button:ColorButton id="applyBtn"
                            width="100%"
                            bgColor="{AppColors.HELL_TÜRKIS}"
                            textColor="0"
                            label="Bestätigen"
                            enabled="{isApplyBtnEnabled(currentState, textInput.text)}"
                            click="applyBtnClickHandler()"/>
    </s:HGroup>

</s:Group>
