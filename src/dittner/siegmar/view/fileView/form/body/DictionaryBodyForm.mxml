<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:input="dittner.siegmar.view.common.input.*"
         xmlns:button="dittner.siegmar.view.common.button.*"
         implements="dittner.siegmar.view.common.form.IBodyForm">

    <fx:Script><![CDATA[
        import dittner.siegmar.bootstrap.async.AsyncOperation;
        import dittner.siegmar.bootstrap.async.IAsyncOperation;
        import dittner.siegmar.domain.fileSystem.body.NoteListBody;
        import dittner.siegmar.domain.fileSystem.body.note.TitledNote;
        import dittner.siegmar.domain.fileSystem.file.SiegmarFile;
        import dittner.siegmar.utils.delay.invalidateOf;
        import dittner.siegmar.view.common.utils.AppColors;
        import dittner.siegmar.view.common.utils.FontName;

        //----------------------------------------------------------------------------------------------
        //
        //  Interface Methods
        //
        //----------------------------------------------------------------------------------------------

        private var operation:IAsyncOperation;
        private var file:SiegmarFile;
        private var fileBody:NoteListBody;
        public function createNote(file:SiegmarFile):IAsyncOperation {
            operation = new AsyncOperation();
            this.file = file;
            this.fileBody = file.body as NoteListBody;
            reservedTitleHash = getReservedTitleHash();
            currentState = "add";
            invalidateOf(focusTextInput);
            return operation;
        }

        public function editNote(file:SiegmarFile):IAsyncOperation {
            operation = new AsyncOperation();
            this.file = file;
            this.fileBody = file.body as NoteListBody;
            reservedTitleHash = getReservedTitleHash();
            var titledNote:TitledNote = file.selectedNote as TitledNote;
            titleInput.text = titledNote.title;
            contentInput.text = titledNote.text;
            currentState = "edit";
            invalidateOf(focusTextInput);
            return operation;
        }

        private function focusTextInput():void {
            if (stage) stage.focus = titleInput;
        }

        public function removeNote(file:SiegmarFile):IAsyncOperation {
            operation = new AsyncOperation();
            this.file = file;
            this.fileBody = file.body as NoteListBody;
            var titledNote:TitledNote = file.selectedNote as TitledNote;
            removeLbl.text = "Sind Sie sicher, das Sie entfernen möchten?\n\n";
            removeLbl.text += titledNote.title + "\n" + titledNote.text;
            currentState = "remove";
            return operation;
        }

        public function clear():void {
            titleInput.text = "";
            contentInput.text = "";
            operation = null;
            reservedTitleHash = null;
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Private Methods
        //
        //----------------------------------------------------------------------------------------------

        private var reservedTitleHash:Object;
        private function getReservedTitleHash():Object {
            var hash:Object = {};
            for each(var note:TitledNote in (file.body as NoteListBody).items)
                hash[note.title] = note != file.selectedNote;
            return hash;
        }

        private function isApplyBtnEnabled(currentState:String, docTitle:String, docContent:String):Boolean {
            if (currentState == "remove") return true;
            else return docContent && docTitle && !reservedTitleHash[docTitle];
        }

        private function cancelBtnClickHandler():void {
            operation.dispatchSuccess(false);
        }

        private function applyBtnClickHandler():void {
            if (currentState == "add") {
                fileBody.addNote(getNote());
            }
            else if (currentState == "edit") {
                fileBody.replaceNote(file.selectedNote, getNote());
            }
            else if (currentState == "remove") {
                fileBody.removeNote(file.selectedNote);
            }
            operation.dispatchSuccess(true);
        }

        private function getNote():TitledNote {
            var res:TitledNote = new TitledNote();
            res.title = titleInput.text;
            res.text = contentInput.text;
            return res;
        }
        ]]></fx:Script>

    <s:states>
        <s:State name="add"/>
        <s:State name="edit"/>
        <s:State name="remove"/>
    </s:states>

    <s:layout>
        <s:VerticalLayout gap="10"/>
    </s:layout>

    <s:Label text.add="NEUE NOTIZ"
             text.edit="AUFBEREITUNG"
             text.remove="ENTFERNUNG"
             width="100%"
             fontFamily="{FontName.MYRIAD}" fontSize="16"
             mouseChildren="false" mouseEnabled="false" paddingBottom="30"
             color="{AppColors.HELL_TÜRKIS}"/>

    <input:TextInputForm id="titleInput"
                         visible.remove="false" includeInLayout.remove="false"
                         width="100%" title="Titel:"/>

    <input:TextInputForm id="contentInput"
                         visible.remove="false" includeInLayout.remove="false"
                         width="100%" title="Inhalt:"/>

    <s:Label id="removeLbl"
             visible="false"
             visible.remove="true"
             width="100%" height="100%" textAlign="center" verticalAlign="middle"
             fontFamily="{FontName.MYRIAD}" fontSize="18"
             mouseChildren="false" mouseEnabled="false"
             maxDisplayedLines="8"
             color="{AppColors.HELL_TÜRKIS}"/>

    <s:HGroup width="100%" gap="10">
        <button:StrokeButton id="cancelBtn"
                             width="100%"
                             color="{AppColors.HELL_TÜRKIS}"
                             label="Abbrechen"
                             click="cancelBtnClickHandler()"/>

        <button:ColorButton id="applyBtn"
                            width="100%"
                            bgColor="{AppColors.HELL_TÜRKIS}"
                            textColor="0"
                            label="Bestätigen"
                            enabled="{isApplyBtnEnabled(currentState, titleInput.text, contentInput.text)}"
                            click="applyBtnClickHandler()"/>
    </s:HGroup>

</s:Group>
