<?xml version="1.0"?>
<core:ViewBase xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:core="dittner.gsa.view.common.view.*"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:button="dittner.gsa.view.common.button.*">

    <fx:Script><![CDATA[
        import dittner.gsa.utils.AppInfo;
        import dittner.gsa.utils.InputUtils;
        import dittner.gsa.view.common.utils.AppColors;
        import dittner.gsa.view.common.utils.FontName;

        import spark.components.supportClasses.TextInputOperation;
        import spark.events.TextOperationEvent;

        //--------------------------------------
        //  userName
        //--------------------------------------
        private var _userName:String = "";
        [Bindable("userNameChanged")]
        public function get userName():String {return _userName;}
        public function set userName(value:String):void {
            if (_userName != value) {
                _userName = value;
                dispatchEvent(new Event("userNameChanged"));
            }
        }

        [Bindable]
        public var isLoginWithError:Boolean;

        public function registerUser():void {
            setCurrentState("registration");
            if (stage) stage.focus = userNameInput;
        }

        public function authorizeUser():void {
            setCurrentState("authorization");
            if (stage) stage.focus = passwordInput;
        }

        public function setFocusToInput():void {
            if (stage && currentState == "registration") {
                stage.focus = userNameInput;
            }
            else if (stage && currentState == "authorization") {
                stage.focus = passwordInput;
            }
        }

        private function validateRegistrationData(userNameField:String, passwordField:String):Boolean {
            return (userNameField || userName) && passwordField && passwordField.length > AppInfo.MIN_PWD_LEN;
        }

        public function clear():void {
            privacyLevelInput.text = "";
            passwordInput.text = "";
            userNameInput.text = "";
        }

        private function validationPrivacyLevelHandler(event:TextOperationEvent):void {
            if (event.operation is TextInputOperation) {
                var regexp:RegExp = InputUtils.DIGITS;
                var match:Object = regexp.exec((event.operation as TextInputOperation).text);
                if (match == null) event.preventDefault();
            }
        }
        ]]></fx:Script>

    <core:states>
        <s:State name="authorization"/>
        <s:State name="registration"/>
    </core:states>

    <s:BitmapImage width="100%" height="100%" source="@Embed(source='/bg_pattern.png')" fillMode="repeat"/>

    <s:VGroup width="100%" height="100%"
              gap="25" horizontalAlign="center"
              paddingTop="30" paddingBottom="20"
              verticalAlign="middle">

        <s:Label fontFamily="{FontName.GEORGIA}"
                 color="{AppColors.HELL_TÜRKIS}"
                 fontSize="38" width="100%" textAlign="center"
                 paddingBottom="60"
                 text.registration="ANMELDUNG"
                 text.authorization="GEHEIMNISSCHUTZAGENT"/>

        <s:HGroup width="100%" gap="10" verticalAlign="middle"
                  visible.authorization="false" includeInLayout.authorization="false">
            <s:Label fontFamily="{FontName.GEORGIA}"
                     color="{AppColors.TEXT_RED}"
                     width="{width/2 - 260}"
                     fontSize="30"
                     textAlign="right"
                     text="Name, Nachname:"/>
            <s:TextInput id="userNameInput" width="500" styleName="loginInput"
                         addedToStage="setFocusToInput()"/>
        </s:HGroup>

        <s:HGroup width="100%" gap="10" verticalAlign="middle">
            <s:Label fontFamily="{FontName.GEORGIA}"
                     color="{AppColors.TEXT_RED}"
                     width="{width/2 - 260}"
                     fontSize="30"
                     textAlign="right"
                     text="Schlüssel:"/>
            <s:TextInput id="passwordInput" width="500" styleName="loginInput"
                         displayAsPassword.authorization="true"/>
        </s:HGroup>

        <s:HGroup width="100%" gap="10" verticalAlign="middle">
            <s:Label fontFamily="{FontName.GEORGIA}"
                     color="{AppColors.TEXT_RED}"
                     width="{width/2 - 260}"
                     fontSize="30"
                     textAlign="right"
                     text="Geheimhaltungsgrad:"/>
            <s:TextInput id="privacyLevelInput" width="500" styleName="loginInput"
                         changing="validationPrivacyLevelHandler(event)"
                         displayAsPassword.authorization="true"/>
        </s:HGroup>

        <s:HGroup width="100%" gap="10" verticalAlign="middle">
            <s:Label fontFamily="{FontName.GEORGIA}"
                     color="{AppColors.TEXT_RED}"
                     width="{width/2 - 260}"
                     fontSize="30"
                     textAlign="right"
                     text="Datenbankschlüssel:"/>
            <s:TextInput id="dataBasePasswordInput" width="500" styleName="loginInput"
                         displayAsPassword.authorization="true"/>
        </s:HGroup>

        <button:BlackButton id="completeBtn"
                            enabled="{validateRegistrationData(userNameInput.text, passwordInput.text)}"
                            width="500"
                            label.registration="Bestätigen"
                            label.authorization="Einloggen"/>

        <s:Label id="errorLbl"
                 fontFamily="{FontName.GEORGIA}"
                 fontWeight="bold"
                 visible="{isLoginWithError}"
                 color="{AppColors.TEXT_INVALID}"
                 width="100%"
                 fontSize="20"
                 textAlign="center"
                 text="Ungültig!"/>

    </s:VGroup>

</core:ViewBase>
