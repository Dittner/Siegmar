<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:input="dittner.gsa.view.common.input.*"
         xmlns:button="dittner.gsa.view.common.button.*"
         xmlns:list="dittner.gsa.view.common.list.*">
    <fx:Script><![CDATA[
        import dittner.gsa.domain.fileSystem.body.links.BookLink;
        import dittner.gsa.view.common.list.SelectableDataGroupEvent;
        import dittner.gsa.view.common.popup.SimplePopup;

        import mx.collections.ArrayCollection;

        import spark.events.TextOperationEvent;

        //--------------------------------------
        //  selectedLink
        //--------------------------------------
        private var _selectedLink:BookLink;
        [Bindable("selectedLinkChanged")]
        public function get selectedLink():BookLink {return _selectedLink;}
        public function set selectedLink(value:BookLink):void {
            if (_selectedLink != value) {
                _selectedLink = value;
                dispatchEvent(new Event("selectedLinkChanged"));
            }
        }

        //--------------------------------------
        //  linkColl
        //--------------------------------------
        private var _linkColl:ArrayCollection;
        [Bindable("linkCollChanged")]
        public function get linkColl():ArrayCollection {return _linkColl;}
        public function set linkColl(value:ArrayCollection):void {
            if (_linkColl != value) {
                _linkColl = value;
                if (linkColl) {
                    linkColl.filterFunction = filterLinks;
                    refreshList();
                }
                dispatchEvent(new Event("linkCollChanged"));
            }
        }

        private function selectedLinkHandler(event:SelectableDataGroupEvent):void {
            if (event.data == null) return;
            selectedLink = event.data;
            filterInput.text = selectedLink ? selectedLink.toString() : "";
            hideList();
        }
        private function filterTextChangeHandler(event:TextOperationEvent):void {
            if (selectedLink && selectedLink.toString() != filterInput.text)
                selectedLink = null;
            refreshList();
        }

        private var isListShown:Boolean = false;
        private function dropDownBtnClickHandler(event:MouseEvent):void {
            if (isListShown) hideList();
            else showList();
        }

        private function filterLinks(item:BookLink):Boolean {
            if (filterInput.text && !selectedLink)
                return item.toString().toLowerCase().indexOf(filterInput.text.toLowerCase()) != -1;
            else
                return true;
        }

        private static const NULL_POINT:Point = new Point();
        private function showList():void {
            if (!isListShown) {
                isListShown = true;
                scroller.width = getExplicitOrMeasuredWidth() - 3;
                var btnPos:Point = filterInput.localToGlobal(NULL_POINT);
                scroller.x = btnPos.x;
                scroller.y = btnPos.y + getExplicitOrMeasuredHeight();
                SimplePopup.container.addElement(scroller);
                refreshList();
            }
        }

        private function hideList():void {
            if (isListShown) {
                isListShown = false;
                SimplePopup.container.removeElement(scroller);
            }
        }

        private function refreshList():void {
            if (isListShown && linkColl)
                linkColl.refresh();
        }
        ]]></fx:Script>

    <fx:Declarations>
        <s:Scroller id="scroller"
                    height="400"
                    horizontalScrollPolicy="off" verticalScrollPolicy="on">
            <list:SelectableDataGroup id="list"
                                      width="100%"
                                      opaqueBackground="#eeEEee"
                                      selectedItem="{selectedLink}"
                                      dataProvider="{linkColl}"
                                      deselectEnabled="true"
                                      selectedItemChange="selectedLinkHandler(event)"
                                      itemRenderer="dittner.gsa.view.fileView.form.body.ArticleBodyBookLinkRenderer">
                <list:layout>
                    <s:VerticalLayout gap="0" useVirtualLayout="true"/>
                </list:layout>
            </list:SelectableDataGroup>
        </s:Scroller>
    </fx:Declarations>
    <s:layout>
        <s:HorizontalLayout gap="0"/>
    </s:layout>

    <input:TextInputForm id="filterInput"
                         showTitle="false"
                         isValidInput="{selectedLink != null}"
                         change="filterTextChangeHandler(event)"
                         width="100%" height="25"/>

    <button:DropDownButton id="dropDownBtn"
                           click="dropDownBtnClickHandler(event)"/>
</s:Group>