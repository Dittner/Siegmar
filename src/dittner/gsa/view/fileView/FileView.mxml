<?xml version="1.0"?>
<view:ViewBase xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:view="dittner.gsa.view.common.view.*"
               xmlns:toolbar="dittner.gsa.view.fileList.toolbar.*"
               xmlns:form="dittner.gsa.view.fileView.form.*"
               xmlns:dictionary="dittner.gsa.view.fileView.file.dictionary.*"
               xmlns:notebook="dittner.gsa.view.fileView.file.notebook.*"
               xmlns:header="dittner.gsa.view.fileView.header.*"
               xmlns:common="cosmoLib.components.styleComponents.*"
               xmlns:booklinks="dittner.gsa.view.fileView.file.bookLinks.*"
               xmlns:article="dittner.gsa.view.fileView.file.article.*">

    <fx:Script><![CDATA[
        import dittner.gsa.bootstrap.async.IAsyncOperation;
        import dittner.gsa.domain.fileSystem.file.FileType;
        import dittner.gsa.domain.fileSystem.file.GSAFile;
        import dittner.gsa.domain.fileSystem.body.links.BookLinksBody;
        import dittner.gsa.view.common.list.SelectableDataGroupEvent;
        import dittner.gsa.view.common.popup.SimplePopup;
        import dittner.gsa.view.common.utils.AppColors;
        import dittner.gsa.view.fileView.file.IFileContent;

        import mx.collections.ICollectionView;

        private var activeFile:IFileContent;
        public function activate(file:GSAFile, bookLinksBody:BookLinksBody):void {
            form.bookLinksBody = bookLinksBody;
            bg.color = file.header.color;
            header.file = file;
            switch (file.header.fileType) {
                case FileType.DICTIONARY :
                    setCurrentState("dictionary");
                    activeFile = dictionary;
                    break;
                case FileType.NOTEBOOK :
                    setCurrentState("notebook");
                    activeFile = notebook;
                    break;
                case FileType.BOOK_LINKS :
                    setCurrentState("links");
                    activeFile = bookLinkList;
                    break;
                case FileType.ARTICLE :
                    setCurrentState("article");
                    activeFile = articleList;
                    break;
            }

            activeFile.bookLinksBody = bookLinksBody;
            activeFile.file = file;
            activeFile.fileBodyList.addEventListener(SelectableDataGroupEvent.SELECTED, noteSelected);
        }

        public function filterNotes(txt:String):void {
            if (activeFile)
                activeFile.filterNotes(txt);
        }

        public function refresh():void {
            if (activeFile) {
                activeFile.fileBodyList.refresh();
                (activeFile.fileBodyList.dataProvider as ICollectionView).refresh();
            }
        }

        public function clear():void {
            if (activeFile) {
                activeFile.filterNotes("");
                activeFile.fileBodyList.removeEventListener(SelectableDataGroupEvent.SELECTED, noteSelected);
            }
        }

        private function noteSelected(event:SelectableDataGroupEvent):void {
            dispatchEvent(event.clone());
        }

        public function showForm(file:GSAFile, toolAction:String):IAsyncOperation {
            var completeOp:IAsyncOperation = form.activate(file, toolAction);
            SimplePopup.show(form, true);
            return completeOp;
        }

        public function closeForm():void {
            SimplePopup.close();
            form.clear();
        }
        ]]></fx:Script>

    <fx:Declarations>
        <form:FileBodyForm id="form"
                           verticalCenter="0" horizontalCenter="0"
                           width="75%" height="75%"/>
    </fx:Declarations>

    <view:states>
        <s:State name="notebook"/>
        <s:State name="dictionary"/>
        <s:State name="links"/>
        <s:State name="article"/>
    </view:states>

    <common:Background id="bg" width="100%" height="100%"/>
    <common:Background width="40" height="100%" color="{AppColors.TOOLBAR}"/>

    <s:VGroup height="100%" left="0" right="40"
              gap="0" horizontalAlign="right">
        <header:DocumentHeader id="header"
                               width="{width - 80}"/>

        <notebook:Notebook id="notebook"
                           includeInLayout="false" visible="false"
                           includeInLayout.notebook="true" visible.notebook="true"
                           width="100%" height="100%"/>

        <dictionary:Dictionary id="dictionary"
                               includeInLayout="false" visible="false"
                               includeInLayout.dictionary="true" visible.dictionary="true"
                               width="100%" height="100%"/>

        <booklinks:BookLinkList id="bookLinkList"
                                includeInLayout="false" visible="false"
                                includeInLayout.links="true" visible.links="true"
                                width="100%" height="100%"/>

        <article:ArticleList id="articleList"
                             includeInLayout="false" visible="false"
                             includeInLayout.article="true" visible.article="true"
                             width="100%" height="100%"/>
    </s:VGroup>

    <toolbar:Toolbar id="toolbar"
                     showSettingsBtn="false"
                     width="40" right="0" height="100%"/>

</view:ViewBase>